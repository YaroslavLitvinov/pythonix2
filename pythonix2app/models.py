#Embedded file name: models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator

class BillingAdmins(models.Model):
    login = models.CharField(max_length=50, verbose_name='\xd0\x9b\xd0\xbe\xd0\xb3\xd0\xb8\xd0\xbd \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')
    passwod = models.CharField(max_length=50, verbose_name='\xd0\x9f\xd0\xb0\xd1\x80\xd0\xbe\xd0\xbb\xd1\x8c \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')
    fio = models.CharField(max_length=50, verbose_name='\xd0\xa4.\xd0\x98.\xd0\x9e \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')
    balance = models.IntegerField(verbose_name='\xd0\x91\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')
    administration = models.BooleanField(verbose_name='\xd0\x9f\xd1\x80\xd0\xb0\xd0\xb2\xd0\xbe \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb0\xd1\x82\xd1\x8c')
    see_report = models.BooleanField(verbose_name='\xd0\x9f\xd1\x80\xd0\xbe\xd1\x81\xd0\xbc\xd0\xbe\xd1\x82\xd1\x80\xd0\xb2 \xd0\xbe\xd1\x82\xd1\x87\xd0\xb5\xd1\x82\xd0\xbe\xd0\xb2')
    gen_card = models.BooleanField(verbose_name='\xd0\x93\xd0\xb5\xd0\xbd\xd0\xb5\xd1\x80\xd0\xb0\xd1\x86\xd0\xb8\xd1\x8f \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xb5\xd0\xba')
    transfer_money = models.BooleanField(verbose_name='\xd0\x9f\xd0\xb5\xd1\x80\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb4 \xd1\x81\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2')

    class Meta:
        verbose_name = u'\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u044b'

    def __unicode__(self):
        return '%s ' % self.fio


class PhysicalNetwork(models.Model):
    name = models.CharField(max_length=150, verbose_name='\xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x84\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8')
    select_admin = models.ManyToManyField(BillingAdmins, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')

    class Meta:
        verbose_name = u'\u0424\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0435\u0442\u0438'

    def __unicode__(self):
        return '%s ' % self.name


class DeviceType(models.Model):
    name = models.CharField(max_length=150, verbose_name='\xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb8\xd0\xbf\xd0\xbe\xd0\xb2 \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2')

    class Meta:
        verbose_name = u'\u0422\u0438\u043f\u044b \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432'

    def __unicode__(self):
        return '%s ' % self.name


class Devices(models.Model):
    name = models.CharField(max_length=150, verbose_name='\xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xa3\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0')
    physicalnetwork = models.ForeignKey(PhysicalNetwork, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x84\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8')
    devicetype = models.ForeignKey(DeviceType, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x82\xd0\xb8\xd0\xbf\xd0\xb0 \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0')
    network_address = models.IPAddressField(verbose_name='\xd0\xa1\xd0\xb5\xd1\x82\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd0\xb0\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0')
    login = models.CharField(max_length=50, verbose_name='\xd0\x9b\xd0\xbe\xd0\xb3\xd0\xb8\xd0\xbd \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf\xd0\xb0 \xd0\xba \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd1\x83')
    passwod = models.CharField(max_length=50, verbose_name='\xd0\x9f\xd0\xb0\xd1\x80\xd0\xbe\xd0\xbb\xd1\x8c \xd0\xb4\xd0\xbb\xd1\x8f \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf\xd0\xb0 \xd0\xba \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd1\x83')
    api_port = models.IntegerField(verbose_name='API \xd0\xbf\xd0\xbe\xd1\x80\xd1\x82')
    master = models.BooleanField(verbose_name='\xd0\x9c\xd0\xb0\xd1\x81\xd1\x82\xd0\xb5\xd1\x80 \xd1\x81\xd0\xb5\xd1\x80\xd0\xb2\xd0\xb5\xd1\x80', blank=True)

    class Meta:
        verbose_name = u'\u0423\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430'

    def __unicode__(self):
        return '%s ' % self.name


class IPNetworks(models.Model):
    STATUS_CHOICES = ((1, '1'),
     (2, '2'),
     (3, '3'),
     (4, '4'),
     (5, '5'),
     (6, '6'),
     (7, '7'),
     (8, '8'),
     (9, '9'),
     (10, '10'),
     (11, '11'),
     (12, '12'),
     (13, '13'),
     (14, '14'),
     (15, '15'),
     (16, '16'),
     (17, '17'),
     (18, '18'),
     (19, '19'),
     (20, '20'),
     (21, '21'),
     (22, '22'),
     (23, '23'),
     (24, '24'),
     (25, '25'),
     (26, '26'),
     (27, '27'),
     (28, '28'),
     (29, '29'),
     (30, '30'),
     (31, '31'),
     (32, '32'))
    ipnetworks = models.IPAddressField(verbose_name='IP \xd0\x9f\xd0\xbe\xd0\xb4\xd1\x81\xd0\xb5\xd1\x82\xd0\xb8')
    CIDR = models.IntegerField(choices=STATUS_CHOICES, default=24)

    class Meta:
        verbose_name = u'\u0421\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u0441\u0435\u0442\u0435\u0439'

    def __unicode__(self):
        return '%s ' % self.ipnetworks


class ClientsGroups(models.Model):
    name = models.CharField(max_length=50, verbose_name='\xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xb3\xd1\x80\xd1\x83\xd0\xbf\xd0\xbf\xd1\x8b')
    networks_list = models.ManyToManyField(IPNetworks, verbose_name='\xd0\xa1\xd0\xbf\xd0\xb8\xd1\x81\xd0\xbe\xd0\xba \xd0\xbf\xd0\xbe\xd0\xb4\xd1\x81\xd0\xb5\xd1\x82\xd0\xb5\xd0\xb9')
    select_admin = models.ManyToManyField(BillingAdmins, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd0\xb0\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')
    select_device = models.ForeignKey(Devices, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0')

    class Meta:
        verbose_name = u'\u0413\u0440\u0443\u043f\u043f\u044b \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432'

    def __unicode__(self):
        return '%s ' % self.name


class Tarifs(models.Model):
    select_physicalnetwork = models.ForeignKey(PhysicalNetwork, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x84\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8')
    name = models.CharField(max_length=150, verbose_name='\xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x82\xd0\xb0\xd1\x80\xd0\xb8\xd1\x84\xd0\xb0')
    speed_up = models.IntegerField(verbose_name='\xd0\x98\xd1\x81\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f\xd1\x89\xd0\xb0\xd1\x8f \xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c, M')
    speed_down = models.IntegerField(verbose_name='\xd0\x92\xd1\x85\xd0\xbe\xd0\xb4\xd1\x8f\xd1\x89\xd0\xb0\xd1\x8f \xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd1\x8c, M')
    fee = models.IntegerField(verbose_name='\xd0\x90\xd0\xb1\xd0\xbe\xd0\xbd\xd0\xbf\xd0\xbb\xd0\xb0\xd1\x82\xd0\xb0')
    speed_limit = models.BooleanField(verbose_name='\xd0\x9b\xd0\xb8\xd0\xbc\xd0\xb8\xd1\x82\xd0\xb8\xd1\x80\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x81\xd0\xba\xd0\xbe\xd1\x80\xd0\xbe\xd1\x81\xd1\x82\xd0\xb8')
    limit_rule = models.CharField(max_length=200, verbose_name='\xd0\x9f\xd1\x80\xd0\xb0\xd0\xb2\xd0\xb8\xd0\xbb\xd0\xbe, \xd0\xbb\xd0\xb8\xd0\xbc\xd0\xb8\xd1\x82\xd0\xb0', blank=True, null=True)

    class Meta:
        verbose_name = u'\u0422\u0430\u0440\u0438\u0444\u044b'

    def __unicode__(self):
        return '%s ' % self.name


class Streets(models.Model):
    name = models.CharField(max_length=150, verbose_name='\xd0\x9d\xd0\xb0\xd0\xb7\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd1\x8b')
    select_device = models.ForeignKey(Devices, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x83\xd1\x81\xd1\x82\xd1\x80\xd0\xbe\xd0\xb9\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0')

    class Meta:
        verbose_name = u'\u0423\u043b\u0438\u0446\u044b'

    def __unicode__(self):
        return '%s %s' % (self.name, self.select_device)


class Clients(models.Model):
    fio = models.CharField(max_length=150, verbose_name='\xd0\xa4.\xd0\x98.\xd0\x9e \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0')
    login = models.CharField(max_length=50, verbose_name='\xd0\x9b\xd0\xbe\xd0\xb3\xd0\xb8\xd0\xbd \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0')
    password = models.CharField(max_length=50, verbose_name='\xd0\x9f\xd0\xb0\xd1\x80\xd0\xbe\xd0\xbb\xd1\x8c \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0')
    mac = models.CharField(max_length=17, verbose_name='MAC address')
    ip_local = models.IPAddressField(verbose_name='Local IP address')
    ip_address = models.IPAddressField(verbose_name='IP \xd0\xb0\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81 \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd0\xb0')
    send_sms = models.BooleanField(verbose_name='\xd0\x96\xd0\xb5\xd0\xbb\xd0\xb0\xd0\xbd\xd0\xb8\xd0\xb5 \xd0\xbf\xd0\xbe\xd0\xbb\xd1\x83\xd1\x87\xd0\xb0\xd1\x82\xd1\x8c \xd1\x81\xd0\xbc\xd1\x81')
    select_tarif = models.ForeignKey(Tarifs, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x82\xd0\xb0\xd1\x80\xd0\xb8\xd1\x84\xd0\xb0')
    select_clients_group = models.ForeignKey(ClientsGroups, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd0\xb3\xd1\x80\xd1\x83\xd0\xbf\xd0\xbf\xd1\x8b \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xbe\xd0\xb2')
    create_date = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xb4\xd0\xba\xd0\xbb\xd1\x8e\xd1\x87\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f')
    end_used_date = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd0\xbe\xd0\xba\xd0\xbe\xd0\xbd\xd1\x87\xd1\x8f\xd0\xbd\xd0\xb8\xd1\x8f \xd1\x83\xd1\x81\xd0\xbb\xd1\x83\xd0\xb3\xd0\xb8')
    select_street = models.ForeignKey(Streets, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x83\xd0\xbb\xd0\xb8\xd1\x86\xd1\x8b')
    mobile_phone = models.CharField(max_length=50, verbose_name='\xd0\x9c\xd0\xbe\xd0\xb1\xd0\xb8\xd0\xbb\xd1\x8c\xd0\xbd\xd1\x8b\xd0\xb9 \xd1\x82\xd0\xb5\xd0\xbb\xd0\xb5\xd1\x84\xd0\xbe\xd0\xbd', blank=True, null=True)
    home_address = models.CharField(max_length=50, verbose_name='\xd0\x94\xd0\xbe\xd0\xbc\xd0\xb0\xd1\x88\xd0\xbd\xd0\xb8\xd0\xb9 \xd0\xb0\xd0\xb4\xd1\x80\xd0\xb5\xd1\x81', blank=True, null=True)
    network_traffic_per_day = models.IntegerField(verbose_name='\xd0\xa1\xd0\xb5\xd1\x82\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd1\x82\xd1\x80\xd0\xb0\xd1\x84\xd0\xb8\xd0\xba \xd0\xb7\xd0\xb0 \xd0\xb4\xd0\xb5\xd0\xbd\xd1\x8c', null=True, default=0)
    network_traffic_for_the_month = models.IntegerField(verbose_name='\xd0\xa1\xd0\xb5\xd1\x82\xd0\xb5\xd0\xb2\xd0\xbe\xd0\xb9 \xd1\x82\xd1\x80\xd0\xb0\xd1\x84\xd0\xb8\xd0\xba \xd0\xb7\xd0\xb0 \xd0\xbc\xd0\xb5\xd1\x81\xd1\x8f\xd1\x86', null=True, default=0)
    balance = models.IntegerField(verbose_name='\xd0\x91\xd0\xb0\xd0\xbb\xd0\xb0\xd0\xbd\xd1\x81', default=0)
    internet_status = models.BooleanField(verbose_name='\xd0\xa1\xd1\x82\xd0\xb0\xd1\x82\xd1\x83\xd1\x81 \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0, \xd0\xb4\xd0\xbe\xd1\x81\xd1\x82\xd1\x83\xd0\xbf \xd1\x80\xd0\xb0\xd0\xb7\xd1\x80\xd0\xb5\xd1\x88\xd0\xb5\xd0\xbd/\xd0\xb7\xd0\xb0\xd0\xbf\xd1\x80\xd0\xb5\xd1\x89\xd0\xb5\xd0\xbd')
    error_card = models.IntegerField(verbose_name='\xd0\x9e\xd1\x88\xd0\xb8\xd0\xb1\xd0\xba\xd0\xb8 \xd0\xbf\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xba\xd0\xbe\xd0\xb9', null=True, default=0)

    class Meta:
        verbose_name = u'\u041a\u043b\u0438\u0435\u043d\u0442\u044b'

    def __unicode__(self):
        return '%s %s %s' % (u'self.fio', u'self.select_clients_group', u'self.ip_address')


class Report(models.Model):
    id_admin_select = models.ForeignKey(BillingAdmins, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd0\x90\xd0\xb4\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb8\xd1\x81\xd1\x82\xd1\x80\xd0\xb0\xd1\x82\xd0\xbe\xd1\x80\xd0\xb0')
    id_client_select = models.ForeignKey(Clients, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd0\x9a\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0')
    sum = models.IntegerField(verbose_name='\xd0\xa1\xd1\x83\xd0\xbc\xd0\xbc\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f')
    date_of_refill = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f')


class TemporaryPayment(models.Model):
    select_client = models.ForeignKey(Clients, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0')
    sum = models.IntegerField(verbose_name='\xd0\xa1\xd1\x83\xd0\xbc\xd0\xbc\xd0\xb0 \xd0\xbf\xd0\xbe\xd0\xbf\xd0\xbe\xd0\xbb\xd0\xbd\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f')
    namber_days = models.IntegerField(verbose_name='\xd0\x9a\xd0\xbe\xd0\xbb\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd1\x82\xd0\xb2\xd0\xbe \xd0\xb4\xd0\xbd\xd0\xb5\xd0\xb9')
    date_of_refill = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd1\x83\xd0\xb4\xd0\xb0\xd0\xbb\xd0\xb5\xd0\xbd\xd0\xb8\xd1\x8f \xd0\xbf\xd0\xbb\xd0\xb0\xd1\x82\xd0\xb5\xd0\xb6\xd0\xb0')

    class Meta:
        verbose_name = u'\u0412\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043b\u0430\u0442\u0435\u0436\u0438'

    def __unicode__(self):
        return '%s' % (self.select_client,)


class Card(models.Model):
    secret_code = models.CharField(max_length=50, verbose_name='\xd0\xa1\xd0\xb5\xd0\xba\xd1\x80\xd0\xb5\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xba\xd0\xbe\xd0\xb4')
    series = models.CharField(max_length=50, verbose_name='\xd0\xa1\xd0\xb5\xd1\x80\xd0\xb8\xd1\x8f')
    par_card = models.IntegerField(verbose_name='\xd0\x9d\xd0\xbe\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xbb \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xba\xd0\xb8')
    create_date = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd1\x81\xd0\xbe\xd0\xb7\xd0\xb4\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f')
    used_date = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f')
    used = models.BooleanField(verbose_name='\xd0\xa1\xd1\x82\xd0\xb0\xd1\x82\xd1\x83\xd1\x81 \xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f')


class GenCardModel(models.Model):

    def f_gen_card(self, count_card, par_card):
        import random
        arr = ['0',
         '1',
         '2',
         '3',
         '4',
         '5',
         '6',
         '7',
         '8',
         '9']
        cards = []
        curent_count = 0
        while curent_count < int(count_card):
            card_code = []
            card_info = []
            series_code = []
            for i in xrange(15):
                card_code.append(random.choice(arr))
                secret_code = ''.join(card_code)

            import datetime
            add_card = Card()
            add_card.create_date = datetime.date.today()
            add_card.executed_date = datetime.date.today()
            add_card.par_card = par_card
            add_card.secret_code = secret_code
            add_card.used_date = datetime.date.today()
            for i in xrange(15):
                series_code.append(random.choice(arr))
                series_namder = ''.join(series_code)

            try:
                get_card = Card.objects.get(series=series_namder)
            except:
                try:
                    get_card = Card.objects.get(secret_code=secret_code)
                except:
                    add_card.series = series_namder
                    add_card.used = 0
                    add_card.save()
                    card_info.append(datetime.date.today())
                    card_info.append(secret_code)
                    cards.append(card_info)

                curent_count = curent_count + 1

        return cards

    class Meta:
        abstract = True


class CardReport(models.Model):
    client_used_card = models.CharField(max_length=100, verbose_name='\xd0\x9a\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82 \xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xb2\xd1\x88\xd0\xb8\xd0\xb9 \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xba\xd1\x83')
    physicalnetwork = models.ForeignKey(PhysicalNetwork, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x84\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8 \xd0\xba\xd0\xbb\xd0\xb8\xd0\xb5\xd0\xbd\xd1\x82\xd0\xb0')
    series_card = models.CharField(max_length=100, verbose_name='\xd0\xa1\xd0\xb5\xd1\x80\xd0\xb8\xd1\x8f \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xba\xd0\xb8')
    secret_code = models.CharField(max_length=50, verbose_name='\xd0\xa1\xd0\xb5\xd0\xba\xd1\x80\xd0\xb5\xd0\xb4\xd0\xbd\xd1\x8b\xd0\xb9 \xd0\xba\xd0\xbe\xd0\xb4')
    par_card = models.CharField(max_length=100, verbose_name='\xd0\x9d\xd0\xbe\xd0\xbc\xd0\xb8\xd0\xbd\xd0\xb0\xd0\xbb \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xba\xd0\xb8')
    used_date = models.DateField(verbose_name='\xd0\x94\xd0\xb0\xd1\x82\xd0\xb0 \xd0\xb8\xd1\x81\xd0\xbf\xd0\xbe\xd0\xbb\xd1\x8c\xd0\xb7\xd0\xbe\xd0\xb2\xd0\xb0\xd0\xbd\xd0\xb8\xd1\x8f')


class PhysicalNetworkCardReport(models.Model):
    physicalnetwork = models.ForeignKey(PhysicalNetwork, verbose_name='\xd0\x92\xd1\x8b\xd0\xb1\xd0\xbe\xd1\x80 \xd1\x84\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8')
    money = models.CharField(max_length=100, verbose_name='\xd0\xa1\xd1\x80\xd0\xb5\xd0\xb4\xd1\x81\xd1\x82\xd0\xb2\xd0\xb0 \xd1\x81 \xd0\xba\xd0\xb0\xd1\x80\xd1\x82\xd0\xbe\xd1\x87\xd0\xb5\xd0\xba \xd0\xb2 \xd1\x84\xd0\xb8\xd0\xb7\xd0\xb8\xd1\x87\xd0\xb5\xd1\x81\xd0\xba\xd0\xbe\xd0\xb9 \xd1\x81\xd0\xb5\xd1\x82\xd0\xb8')


class NewDate(models.Model):

    def f_new_date(self, old_date):
        from datetime import datetime
        old_date_string = old_date
        split_date = str(old_date_string).split('-')
        if int(split_date[1]) + 1 > 12:
            split_date = (str(int(split_date[0]) + 1) + '-' + '01' + '-' + split_date[2]).split('-')
        else:
            split_date = (str(split_date[0]) + '-' + str(int(split_date[1]) + 1) + '-' + split_date[2]).split('-')
        try:
            dt_obj = datetime(int(split_date[0]), int(split_date[1]), int(split_date[2]))
            date_str = dt_obj.strftime('%Y-%m-%d')
            return date_str
        except:
            dt_obj = datetime(int(split_date[0]), int(split_date[1]) + 1, 1)
            date_str = dt_obj.strftime('%Y-%m-%d')
            return date_str

    class Meta:
        abstract = True


class InspectionRightsAdmin(models.Model):

    def f_inspection(self, admin_id, group_id):
        sel_admin = BillingAdmins.objects.get(id=admin_id)
        a = sel_admin.clientsgroups_set.all()
        g = 0
        for i in a:
            if int(i.id) == int(group_id):
                g = g + 1

        return g

    class Meta:
        abstract = True
